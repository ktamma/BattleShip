// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211220110735_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Config", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoardSizeX")
                        .HasColumnType("int");

                    b.Property<int>("BoardSizeY")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Player1Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Player2Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TouchRuleId")
                        .HasColumnType("int");

                    b.HasKey("ConfigId");

                    b.HasIndex("TouchRuleId");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("Domain.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Board1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Board2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("MoveByPlayer")
                        .HasColumnType("bit");

                    b.Property<string>("Player1Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Player2Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("GameId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Domain.Ship", b =>
                {
                    b.Property<int>("ShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Coordinates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("Lenght")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Ships1GameId")
                        .HasColumnType("int");

                    b.Property<int?>("Ships2GameId")
                        .HasColumnType("int");

                    b.HasKey("ShipId");

                    b.HasIndex("Ships1GameId");

                    b.HasIndex("Ships2GameId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("Domain.ShipConfig", b =>
                {
                    b.Property<int>("ShipConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConfigId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShipSizeX")
                        .HasColumnType("int");

                    b.Property<int>("ShipSizeY")
                        .HasColumnType("int");

                    b.HasKey("ShipConfigId");

                    b.HasIndex("ConfigId");

                    b.ToTable("ShipConfigs");
                });

            modelBuilder.Entity("Domain.TouchRule", b =>
                {
                    b.Property<int>("TouchRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Rule")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TouchRuleId");

                    b.ToTable("TouchRules");
                });

            modelBuilder.Entity("Domain.Config", b =>
                {
                    b.HasOne("Domain.TouchRule", "TouchRule")
                        .WithMany("Configs")
                        .HasForeignKey("TouchRuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TouchRule");
                });

            modelBuilder.Entity("Domain.Ship", b =>
                {
                    b.HasOne("Domain.Game", "Ships1")
                        .WithMany("Player1Ships")
                        .HasForeignKey("Ships1GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Game", "Ships2")
                        .WithMany("Player2Ships")
                        .HasForeignKey("Ships2GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Ships1");

                    b.Navigation("Ships2");
                });

            modelBuilder.Entity("Domain.ShipConfig", b =>
                {
                    b.HasOne("Domain.Config", "Config")
                        .WithMany("ShipConfigs")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Config");
                });

            modelBuilder.Entity("Domain.Config", b =>
                {
                    b.Navigation("ShipConfigs");
                });

            modelBuilder.Entity("Domain.Game", b =>
                {
                    b.Navigation("Player1Ships");

                    b.Navigation("Player2Ships");
                });

            modelBuilder.Entity("Domain.TouchRule", b =>
                {
                    b.Navigation("Configs");
                });
#pragma warning restore 612, 618
        }
    }
}
